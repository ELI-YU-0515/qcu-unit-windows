@page "/mysystem"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using qcu_unit_windows.Components.Layout
@layout DashboardLayout
@inject NavigationManager Navigation

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<button class="toggle-sidebar-button @sidebarButtonClass" @onclick="ToggleSidebar">
    &#8594;
</button>

<div class="sidebar-overlay @(sidebarClass == "open" ? "visible" : "")" @onclick="ToggleSidebar"></div>
<div class="home-sidebar @sidebarClass">
    <h1 class="txt1-headline">QCU Repo</h1>
    <button class="my-systems-button" @onclick="MySystems">My Systems</button>
    <input class="logout-button" type="button" value="Logout" @onclick="qcuUnitLogin" />
</div>

<div class="home-layout2">
    <section class="search-section">
        <div class="search-bar">
            <input type="text" placeholder="Search..." />
            <button>Search</button>
        </div>
    </section>

    <div class="title-box">
        <h1 class="txt1 featured-title2">My Systems</h1>
        <div class="button-group2">
            <input class="back-button" type="button" value="Back" @onclick="home" />
            <input class="upload-button" type="button" value="Upload" @onclick="OpenPopupForNew" />
        </div>
    </div>

    <div class="mysystem-installed">
        <h1 class="txt1 featured-title3">Uploaded Systems</h1>

        <div class="general-grid">
            @foreach (var system in uploadedSystems)
            {
                <div class="general-box">
                    @if (!string.IsNullOrEmpty(system.ImageUrl))
                    {
                        <img src="@system.ImageUrl" alt="System Image" style="max-width: 200px; max-height: 200px; border: 1px solid #ccc;" />
                    }
                    <p><strong>Title</strong> @system.Title</p>
                    <p><strong>Description</strong> @system.Description</p>
                    <p><strong>Instructions</strong> @system.Instructions</p>
                    <p><strong>Zip File</strong> @system.ZipFileName</p>
                    <div style="margin-top: 10px;">
                        <button class="remove-button" @onclick="@(() => DeleteUploadedSystem(system))">Delete</button>
                        <button class="edit-button" @onclick="@(() => OpenPopupForEdit(system))">Edit</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (showPopup)
{
    <div class="popup-overlay">
        <div class="popup-modal">
            <h2>@(isEditMode ? "Edit" : "Upload")</h2>

            <div class="upper-buttons">
                <label class="upload-zip-button">
                    Upload Zip File <span class="required">*</span>
                    <InputFile OnChange="HandleFileSelectedAsync" accept=".zip" style="display:none" />
                </label>
                @if (showValidation && string.IsNullOrWhiteSpace(tempZipFileName))
                {
                    <p class="validation-error-zip">ZIP file is required.</p>
                }

                @if (!string.IsNullOrEmpty(tempZipFileName))
                {
                    <div>
                        <p class="validation-error-zip">@tempZipFileName</p>
                    </div>
                }

                <div style="text-align: right;">
                    <button class="save-button" @onclick="SaveSystem">Save</button>
                    <button class="return-button" @onclick="ClosePopup">Cancel</button>
                </div>
            </div>

            <div class="upload-container">
                <div class="image-container">
                    @if (!string.IsNullOrEmpty(imagePreviewUrl))
                    {
                        <div style="position: relative; display: inline-block; margin-top: 10px;">
                            <img src="@imagePreviewUrl" class="image" style="max-width: 200px; max-height: 200px; border: 1px solid #ccc;" />
                            <button @onclick="RemoveImage" class="delete-button">×</button>
                        </div>
                    }
                </div>

                <label class="add-image-button">
                    Add Image <span class="required">*</span>
                    <InputFile OnChange="ImageSelectedAsync" accept=".jpg,.jpeg,.png" style="display:none" />
                </label><br />
                @if (showValidation && string.IsNullOrWhiteSpace(imagePreviewUrl))
                {
                    <p class="validation-error">Image is required.</p>
                }

                <label class="field-label">Title <span class="required">*</span></label><br />
                <textarea class="title-text-field" @bind="title" rows="2" cols="50" placeholder="Add Title"></textarea><br />
                @if (showValidation && string.IsNullOrWhiteSpace(title))
                {
                    <p class="validation-error">Title is required.</p>
                }

                <label class="field-label">Description <span class="required">*</span></label><br />
                <textarea class="description-text-field" @bind="description" rows="3" cols="40" placeholder="Add Description"></textarea><br />
                @if (showValidation && string.IsNullOrWhiteSpace(description))
                {
                    <p class="validation-error">Description is required.</p>
                }

                <label class="field-label">Instructions (Optional)</label><br />
                <textarea class="instruction-text-field" @bind="instruction" rows="3" cols="40" placeholder="Add Instructions (Optional)"></textarea>
            </div>

            <p>Kindly upload your system in ZIP format.</p>
        </div>
    </div>
}


@code {
    private List<UploadedSystem> uploadedSystems = new();

    private string? imagePreviewUrl;
    private string? title;
    private string? description;
    private string? instruction;
    private string? tempZipFileName;
    private byte[]? tempZipBytes;

    private bool showPopup = false;
    private bool showValidation = false;
    private bool isEditMode = false;
    private UploadedSystem? editingSystem = null;

    private void OpenPopupForNew()
    {
        isEditMode = false;
        showValidation = false;
        editingSystem = null;
        showPopup = true;
        ClearPopupFields();
    }

    private void OpenPopupForEdit(UploadedSystem system)
    {
        isEditMode = true;
        editingSystem = system;
        title = system.Title;
        description = system.Description;
        instruction = system.Instructions;
        tempZipFileName = system.ZipFileName;
        imagePreviewUrl = system.ImageUrl;
        showPopup = true;
        showValidation = false;
    }

    private void ClosePopup()
    {
        ClearPopupFields();
        showPopup = false;
        editingSystem = null;
        isEditMode = false;
    }

    private void ClearPopupFields()
    {
        title = description = instruction = tempZipFileName = imagePreviewUrl = null;
        tempZipBytes = null;
        showValidation = false;
    }

    private async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Name.EndsWith(".zip"))
        {
            tempZipFileName = file.Name;
            using var stream = file.OpenReadStream(20 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            tempZipBytes = ms.ToArray();
        }
    }

    private async Task ImageSelectedAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            imagePreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }

    private void RemoveImage()
    {
        imagePreviewUrl = null;
    }

    private void SaveSystem()
    {
        showValidation = true;

        bool isValid =
            !string.IsNullOrWhiteSpace(title) &&
            !string.IsNullOrWhiteSpace(description) &&
            !string.IsNullOrWhiteSpace(tempZipFileName) &&
            !string.IsNullOrWhiteSpace(imagePreviewUrl);

        if (isValid)
        {
            if (isEditMode && editingSystem != null)
            {
                editingSystem.Title = title!;
                editingSystem.Description = description;
                editingSystem.Instructions = instruction;
                editingSystem.ZipFileName = tempZipFileName!;
                editingSystem.ImageUrl = imagePreviewUrl;
            }
            else
            {
                uploadedSystems.Add(new UploadedSystem
                    {
                        Title = title!,
                        Description = description,
                        Instructions = instruction,
                        ZipFileName = tempZipFileName!,
                        ImageUrl = imagePreviewUrl
                    });
            }

            ClosePopup();
        }
    }

    private void DeleteUploadedSystem(UploadedSystem system)
    {
        uploadedSystems.Remove(system);
    }

    private string sidebarClass = "closed";
    private string sidebarButtonClass = "";

    private void ToggleSidebar()
    {
        sidebarClass = sidebarClass == "closed" ? "open" : "closed";
        sidebarButtonClass = sidebarClass == "open" ? "open" : "";
    }

    private void qcuUnitLogin() => Navigation.NavigateTo("/login");
    private void home() => Navigation.NavigateTo("/home");
    private void MySystems() => Navigation.NavigateTo("/mysystem");

    public class UploadedSystem
    {
        public string Title { get; set; } = "";
        public string? Description { get; set; }
        public string? Instructions { get; set; }
        public string ZipFileName { get; set; } = "";
        public string? ImageUrl { get; set; }
    }
}
