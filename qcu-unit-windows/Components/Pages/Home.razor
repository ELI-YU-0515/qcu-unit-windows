@page "/home"
@using qcu_unit_windows.Components.Layout
@layout DashboardLayout
@inject NavigationManager Navigation
@implements IDisposable

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- Toggle button always visible on top -->
<button class="toggle-sidebar-button @sidebarButtonClass" @onclick="ToggleSidebar">
    &#8594; 
</button>

<div class="home-layout">
    <div class="home-sidebar @sidebarClass">
        <h1 class="txt1-headline">QCU Repo</h1>
        <button class="my-systems-button" @onclick="MySystems">My Systems</button>
        <input class="logout-button" type="button" value="Logout" @onclick="qcuUnitLogin" />
    </div>

    <div class="home-layout2">
        <div class="search-section-wrapper" id="searchWrapper">
            <section class="search-section @(isScrolled ? "expanded" : "")">
                <div class="search-bar">
                    <input type="text" placeholder="Search..." />
                    <button>Search</button>
                </div>
            </section>
        </div>

        <h1 class="txt1 featured-title">Featured</h1>

        <div class="featured-container clickable-feature" @onclick="qcuUnitStore">
            <!-- Left arrow -->
            <button class="nav-button nav-left" @onclick:stopPropagation="true" @onclick="PreviousItem">◀</button>

            <!-- Show one item at a time -->
            <div class="featured-grid single-item">
                @if (items.Count > 0)
                {
                    <div class="home-content-container" style="transform: translateX(-@currentItemIndex * 100%);">
                        <div class="item-content clickable-item" @onclick="qcuUnitStore">
                            <p class="item-title">@items[currentItemIndex]</p>
                        </div>

                    </div>

                }
            </div>

            <!-- Right arrow -->
            <button class="nav-button nav-right" @onclick:stopPropagation="true" @onclick="NextItem">▶</button>
        </div>

        <!-- Add a row of 7 squares below -->
        <div class="square-row">
            @for (int i = 0; i < items.Count; i++)
            {
                <div class="square @(i == currentItemIndex ? "active" : "")"></div>
            }
        </div>

    </div>

</div>
<div class="explore-banner">
    <div class="explore-divider"></div>
    <h1 class="explore-title">Explore</h1>
    <div class="explore-divider"></div>
</div>

<div class="general-grid">
    @for (int i = 1; i <= 20; i++) // 4x5 = 20 items
    {
        <div class="general-box" @onclick="() => OnGeneralItemClick(i)">
            <p>Item @i</p>
        </div>
    }
</div>
@inject IJSRuntime JS
@code {
    private string sidebarClass = "closed";
    private string sidebarButtonClass = "";
    private bool isScrolled = false;
    private DotNetObjectReference<Home>? _dotNetRef;

    [JSInvokable]
    public void OnScrollChanged(double scrollTop)
    {
        isScrolled = scrollTop > 100;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerScrollListener", _dotNetRef);
        }
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

    private int currentItemIndex = 0;

    private List<string> items = new()
    {
        "Application 1", "Application 2", "Application 3", "Application 4", "Application 5", "Application 6", "Application 7"
    };

    private void ToggleSidebar()
    {
        sidebarClass = sidebarClass == "closed" ? "open" : "closed";
        sidebarButtonClass = sidebarClass == "open" ? "open" : "";
    }

    private void qcuUnitLogin() => Navigation.NavigateTo("/login");
    private void qcuUnitStore() => Navigation.NavigateTo("/Store");
    private void MySystems() => Navigation.NavigateTo("/mysystem");

    private void PreviousItem()
    {
        currentItemIndex = (currentItemIndex - 1 + items.Count) % items.Count;
    }

    private void NextItem()
    {
        currentItemIndex = (currentItemIndex + 1) % items.Count;
    }
    private void OnGeneralItemClick(int itemNumber)
    {
        Console.WriteLine($"Clicked on: Item {itemNumber}");
        // Future logic goes here
    }           
}
