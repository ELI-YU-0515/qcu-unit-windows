@page "/"
@page "/login"
@using qcu_unit_windows.Components.Layout
@layout LoginLayout
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject FirebaseAuthService firebaseAuthService
@inject EmailServices emailService
@inject FirestoreService fireStoreService
@using Firebase.Auth
@using Google.Cloud.Firestore

<div class="loginn-layout">
    <div class="horizontal-box">

        <!-- Welcome Section -->
        <div class="welcome-box">
            <h1>Welcome to QCU Repository</h1>
            <br /><br /><br />
            <p>This platform allows you to press, store, and manage QCU resources easily.</p><br /><br />
            <p>Please log in to continue.</p>
        </div>

        <!-- Login Section -->
        <div class="login-box">
            <img class="qcu-logo" src="Images/qcurepo.jpg" alt="Logo" />

            <!-- Step 1: Login -->
            <div class="prompt-1" style="display:block;">
                <h1 style="text-align:center; margin-bottom:30px;">LOGIN</h1>
                <p style="margin-bottom:60px;">Welcome to QCU-REPO</p>

                <input id="login-email" placeholder="Email" type="email" @bind="email" />
                <input id="login-password" placeholder="Password" type="password" @bind="password" />
                <input id="login-button" type="button" value="LOGIN" @onclick="LoginAsync" />

                @if (!string.IsNullOrEmpty(feedbackMessage))
                {
                    <p class="@feedbackClass" style="margin-top:5px; color:green;">QCU Repo says: @feedbackMessage</p>
                }

                <div id="password-instructions" class="password-instructions" style="display:none;">
                    <p>Password format should be like this:</p>
                    <p><strong>QCU-STUDENTID-surname</strong></p>
                    <p><strong>Example: QCU-201234-guzman</strong></p>
                </div>

                <input type="button" value="Dev: Skip to First Time Logging In?" style="margin-top:10px; color:red;display: none;" @onclick="@(() => ShowStep(2))" />
            </div>

            <!-- Step 2: Verification -->
            <div class="prompt-2" style="display:none;">
                <svg @onclick="@(() => ShowStep(1))" xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-button">
                    <path d="M19 12H5"></path>
                    <path d="M12 5l-7 7 7 7"></path>
                </svg>
                <br /><br /><br />

                <h2>First Time Logging In?</h2>
                <p>We’ve sent a 6-digit code to your email. Please Check your SPAM emails</p>

                <input id="temp-code" placeholder="Enter 6-Digit Code" maxlength="6" inputmode="numeric" pattern="\d*" autocomplete="new-password" spellcheck="false" @bind="verificationCode" />
                <input type="button" value="Submit" @onclick="VerifyCodeAsync" />

                @if (!string.IsNullOrEmpty(feedbackMessage))
                {
                    <p class="@feedbackClass" style="margin-top:5px; color:green;">QCU Repo says: @feedbackMessage</p>
                }

                <input type="button" value="Dev: Skip to Dashboard" style="margin-top:10px; color:red; display: none;" @onclick="@(() => Navigation.NavigateTo("/home"))">
            </div>


        </div>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private string verificationCode = "";
    private string newPassword1 = "";
    private string newPassword2 = "";

    private string feedbackMessage = "";
    private string feedbackClass = "";



    // Step 1: Login
    private async Task LoginAsync()
    {
        feedbackMessage = "";

        if (string.IsNullOrWhiteSpace(email))
        {
            ShowFeedback("Please input an email.", false);
            return;
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            ShowFeedback("Please input a password.", false);
            return;
        }

        try
        {
            var result = await firebaseAuthService.LoginAsync(email, password);

            if (result.IsSuccess)
            {
                var isNewUser = await fireStoreService.IsFirstTimeUserAsync(email);

                if (isNewUser)
                {
                    ShowFeedback("Login successful. Proceeding to verification...", true);
                    ShowStep(2);
                    await emailService.SendVerificationCodeAsync(email);
                    ShowFeedback("Verification code sent to your email.", true);
                }
                else
                {
                    ShowFeedback("Login successful. Redirecting to dashboard...", true);
                    Navigation.NavigateTo("/home");
                }
            }
            else
            {
                ShowFeedback(result.ErrorMessage ?? "Incorrect email or password.", false);
            }
        }
        catch (Exception ex)
        {
            ShowFeedback($"Login failed: {ex.Message}", false);
        }
    }

    private void ShowStep(int step)
    {
        JSRuntime.InvokeVoidAsync("eval", $@"
            document.querySelectorAll('.prompt-1, .prompt-2, .prompt-3').forEach(el => el.style.display = 'none');
            document.querySelector('.prompt-{step}').style.display = 'block';
        ");
        feedbackMessage = "";
        StateHasChanged();
    }

    // Step 2: Verify Code
    private async Task VerifyCodeAsync()
    {
        if (string.IsNullOrWhiteSpace(verificationCode))
        {
            ShowFeedback("Verification code cannot be empty.", false);
            return;
        }

        if (verificationCode.Length != 6)
        {
            ShowFeedback("Please enter the 6-digit verification code.", false);
            return;
        }

        try
        {
            var isValid = await emailService.VerifyCodeAsync(email, verificationCode);

            if (isValid)
            {
                ShowFeedback("Code verified. Sending password reset link...", true);

                var result = await firebaseAuthService.SendPasswordResetEmailAsync(email);

                if (result == "Success")
                {
                    await fireStoreService.MarkUserAsNotFirstTimeAsync(email); // ✅ Mark after reset link sent
                    ShowFeedback("Password reset link sent to your email. Please check your inbox.", true);
                    await Task.Delay(5000);
                    ShowStep(1); // Or whichever prompt you want to go back to


                    email = "";
                    password = "";
                }

                else
                {
                    ShowFeedback($"Failed to send password reset link: {result}", false);
                }
            }
            else
            {
                ShowFeedback("Invalid verification code. Please try again.", false);
            }
        }
        catch (Exception ex)
        {
            ShowFeedback($"Verification failed: {ex.Message}", false);
        }
    }


    // Step 3: Create New Password
    private async Task CreatePasswordAsync()
    {
        if (newPassword1 != newPassword2)
        {
            ShowFeedback("Passwords do not match.", false);
            return;
        }

        if (!IsValidPassword(newPassword1))
        {
            ShowFeedback("Password must include CAPITAL LETTERS, symbols, and numbers.", false);
            return;
        }

        try
        {
            await firebaseAuthService.UpdatePasswordAsync(email, newPassword1);
            await fireStoreService.MarkUserAsNotFirstTimeAsync(email);

            ShowFeedback("Password created successfully. Redirecting...", true);
            Navigation.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            ShowFeedback($"Password reset failed: {ex.Message}", false);
        }
    }

    private bool IsValidPassword(string password)
    {
        return password.Any(char.IsUpper) && password.Any(char.IsDigit) && password.Any(ch => !char.IsLetterOrDigit(ch));
    }

    private void ShowFeedback(string message, bool isSuccess)
    {
        feedbackMessage = message;
        feedbackClass = isSuccess ? "success-message" : "error-message";
    }
}


<script>
    window.showPasswordInstructions = () => {
        document.getElementById("password-instructions").style.display = "block";
    };

    window.hidePasswordInstructions = () => {
        document.getElementById("password-instructions").style.display = "none";
    };
</script>
