@page "/home"
@using qcu_unit_windows.Components.Layout
@using Google.Cloud.Firestore;
@using Google.Apis.Auth.OAuth2;
@using qcu_unit_windows.Properties


@layout DashboardLayout
@inject NavigationManager Navigation
@inject FirebaseAuthService firebaseAuthService
@implements IDisposable



<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- Toggle button always visible on top -->
<button class="toggle-sidebar-button @sidebarButtonClass" @onclick="ToggleSidebar">
    ☰
</button>



<div class="home-layout">
    <div class="sidebar-overlay @(sidebarClass == "open" ? "visible" : "")" @onclick="ToggleSidebar"></div>
    <div class="home-sidebar @sidebarClass">
        <img class="qcu-logo" src="Images/qcurepo.jpg" alt="Logo"/>
        <button class="active-button">Dashboard</button>
        <button class="my-systems-button" @onclick="MySystems">My Systems</button>
        <button class="my-systems-button" @onclick="adminRegister">Add Users</button>

        <input class="logout-button" type="button" value="Logout" @onclick="qcuUnitLogin" />
    </div>
    <div class="home-layout2">
            <section class="search-section @(isScrolled ? "expanded" : "")">
                <div class="search-bar">
                    <input type="text" placeholder="Search..." />
                    <button>Search</button>
                </div>
            </section>
        

        <h1 class="txt1 featured-title">Featured</h1>

        <div class="featured-container clickable-feature">
            <!-- Left arrow -->
            <button class="nav-button nav-left" @onclick:stopPropagation="true" @onclick="PreviousItem">◀</button>

            <!-- Show one item at a time -->
            <div class="featured-grid single-item">
                @if (uploadedSystems.Count > 0)
                {
                    <div class="home-content-container" style="transform: translateX(-@currentItemIndex * 100%);">
                        <div class="item-content clickable-item" @onclick="qcuUnitStore" style="width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;">
                            @if (!string.IsNullOrEmpty(uploadedSystems[currentItemIndex].ImageUrl))
                            {
                                <img src="@uploadedSystems[currentItemIndex].ImageUrl" alt="System Image"
                                     style="max-width: 100%; max-height: 100%; object-fit: contain;" />
                            }
                        </div>
                    </div>

                }
            </div>


            <!-- Right arrow -->
            <button class="nav-button nav-right" @onclick:stopPropagation="true" @onclick="NextItem">▶</button>
        </div>

        <!-- Add a row of 7 squares below -->
        <div class="square-row">
            @for (int i = 0; i < items.Count; i++)
            {
                <div class="square @(i == currentItemIndex ? "active" : "")"></div>
            }
        </div>
    </div>
</div>

<div class="explore-banner">
    <div class="explore-divider"></div>
    <h1 class="explore-title">Explore</h1>
    <div class="explore-divider"></div>
</div>
    <!-- FB Reels Style Slideshow - Mobile Only -->
    <div class="reels-wrapper">
    <div class="reels-scroll-container">
        @foreach (var system in systems)
        {
            <div class="reels-item" @onclick="() => OnSystemClick(system)">
                <p>@system</p>
            </div>
        }
    </div>
        <div class="reels-scroll-container">
        @foreach (var system in systems)
        {
            <div class="reels-item" @onclick="() => OnSystemClick(system)">
                <p>@system</p>
            </div>
        }
    </div>
    <div class="reels-scroll-container">
        @foreach (var system in systems)
        {
            <div class="reels-item" @onclick="() => OnSystemClick(system)">
                <p>@system</p>
            </div>
        }
    </div>
</div>

<div class="general-grid">
    @foreach (var system in uploadedSystems)
    {
        <div class="general-box">
            @if (!string.IsNullOrEmpty(system.ImageUrl))
            {
                <img src="@system.ImageUrl" alt="System Image" style="max-width: 150px; max-height: 150px; border: 1px solid #000000; border-radius:4px; margin-left: 10px;" />
            }
            <p><strong>Title: </strong> @system.Title</p>
            <p><strong>Description: </strong> @system.Description</p>
        </div>
    }
</div>





<!-- MOBILE NAVBAR -->



@inject IJSRuntime JS
@code {
    private string sidebarClass = "closed";
    private string sidebarButtonClass = "";
    private List<UploadedSystem> uploadedSystems = new();
    private bool isScrolled = false;
    private DotNetObjectReference<Home>? _dotNetRef;

        public FirestoreDb _firestore;

        public Home()
        {
            // Path to your service account JSON key
        string pathToJson = @"";

            // Load the credential from the JSON key file
            GoogleCredential credential = GoogleCredential.FromFile(pathToJson);

            // Create Firestore client with the credential
            _firestore = new FirestoreDbBuilder
                {
                    ProjectId = "qcu-repo-dbf94",
                    Credential = credential
                }.Build();
        }


    private async Task LoadUploadedSystemsAsync()
    {
        uploadedSystems.Clear();

        try
        {
            var systemsGroupQuery = _firestore.CollectionGroup("systems");
            var snapshot = await systemsGroupQuery.GetSnapshotAsync();

            foreach (var doc in snapshot.Documents)
            {
                if (doc.Exists)
                {
                    var data = doc.ToDictionary();

                    uploadedSystems.Add(new UploadedSystem
                    {
                        Title = data.ContainsKey("title") ? data["title"]?.ToString() ?? "" : "",
                        Description = data.ContainsKey("description") ? data["description"]?.ToString() : null,
                        Instructions = data.ContainsKey("instructions") ? data["instructions"]?.ToString() : null,
                        ZipFileName = data.ContainsKey("zipFileName") ? data["zipFileName"]?.ToString() ?? "" : "",
                        ImageUrl = data.ContainsKey("imageUrl") ? data["imageUrl"]?.ToString() : null
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading systems: {ex.Message}");
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        systems = await GetAllSystemsAsync();
        await LoadUploadedSystemsAsync(); // <-- Load uploaded systems
    }


    [JSInvokable]
    public void OnScrollChanged(double scrollTop)
    {
        isScrolled = scrollTop > 100;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerScrollListener", _dotNetRef);
        }
    }
    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
    private int currentItemIndex = 0;
    private List<string> items = new()
    {
        "Application 1", "Application 2", "Application 3", "Application 4", "Application 5", "Application 6", "Application 7"
    };
    private void ToggleSidebar()
    {
        sidebarClass = sidebarClass == "closed" ? "open" : "closed";
        sidebarButtonClass = sidebarClass == "open" ? "open" : "";
    }
    private void qcuUnitLogin() => Navigation.NavigateTo("/login");
    private void qcuUnitStore() => Navigation.NavigateTo("/Store");
    private void MySystems() => Navigation.NavigateTo("/mysystem");
    private void adminRegister() => Navigation.NavigateTo("/register");

    private void PreviousItem()
    {
        if (currentItemIndex > 0)
        {
            currentItemIndex--;
        }
    }

    private void NextItem()
    {
        if (currentItemIndex < items.Count - 1)
        {
            currentItemIndex++;
        }
    }
    private void OnGeneralItemClick(int itemNumber)
    {
        Console.WriteLine($"Clicked on: Item {itemNumber}");
        // Future logic goes here
    }           

    public async Task<List<string>> GetAllSystemsAsync()
    {
        var systems = new List<string>();

        // Get all documents in 'students' collection
        var studentsSnapshot = await _firestore.Collection("students").GetSnapshotAsync();

        foreach (var studentDoc in studentsSnapshot.Documents)
        {
            // Access the subcollection "systems" of each student
            var systemsRef = studentDoc.Reference.Collection("systems");
            var systemsSnapshot = await systemsRef.GetSnapshotAsync();

            foreach (var doc in systemsSnapshot.Documents)
            {
                if (doc.TryGetValue("name", out string name))
                {
                    systems.Add(name);
                }
            }
        }

        return systems;
    }

    private List<string> systems = new()
    {
        "System A", "System B", "System C", "System D", "System E",
        "System F", "System G", "System H", "System I", "System J"
    };

    private void OnSystemClick(string systemName)
    {
        // Handle click (redirect, open modal, etc.)
        Console.WriteLine($"Clicked: {systemName}");
    }
    private void DownloadFile(string zipFileName)
    {
        // Your download logic here
        Console.WriteLine($"Download clicked for: {zipFileName}");
        // e.g., open URL or trigger download from server
    }


}



