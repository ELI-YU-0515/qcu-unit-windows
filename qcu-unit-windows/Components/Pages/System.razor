@page "/mysystem"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using qcu_unit_windows.Components.Layout
@using Google.Cloud.Firestore;
@using Google.Apis.Auth.OAuth2;

@layout DashboardLayout
@inject NavigationManager Navigation
@inject FirebaseAuthService firebaseAuthService


<meta name="viewport" content="width=device-width, initial-scale=1.0">

<button class="toggle-sidebar-button @sidebarButtonClass" @onclick="ToggleSidebar">
    ☰
</button>

<div class="sidebar-overlay @(sidebarClass == "open" ? "visible" : "")" @onclick="ToggleSidebar"></div>
<div class="home-sidebar @sidebarClass">
    <img class="qcu-logo" src="Images/qcurepo.jpg" alt="Logo" />
    <button class="my-systems-button" @onclick="home">Dashboard</button>
    <button class="active-button" @onclick="MySystems">My Systems</button>
    <button class="my-systems-button" @onclick="adminRegister">Add Users</button>

    <input class="logout-button" type="button" value="Logout" @onclick="qcuUnitLogin" />
</div>

<div class="home-layout2">
    <section class="search-section">
        <div class="search-bar">
            <input type="text" placeholder="Search..." />
            <button>Search</button>
        </div>
    </section>

    <div class="title-box">
        <label class="profile-holder">
            @if (!string.IsNullOrEmpty(imagePreviewUrl))
            {
                <div style="position: relative; width: 160px; height: 160px;">
                    <img src="@imagePreviewUrl" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover; border: 2px solid black;" />
                    <button @onclick="RemoveImage" class="delete-button"
                            style="position: absolute; top: 5px; right: 5px; background: rgba(255,0,0,0.7); color: white; border: none; border-radius: 50%; width: 24px; height: 24px; font-weight: bold; cursor: pointer;">
                        ×
                    </button>
                </div>
            }
            else
            {

                <span class="profile-text">Profile Picture <br><span class="plus-sign">+</span></span>
            }
            <InputFile OnChange="ImageSelectedAsync" accept=".jpg,.jpeg,.png" style="display:none;" />
        </label>

        <h1 class="txt1 featured-title2">My Systems</h1>
        <div class="button-group2">
            <input class="upload-button" type="button" value="Upload" @onclick="OpenPopupForNew" />
        </div>
    </div>

    <div class="mysystem-installed">
        <h1 class="txt1 featured-title3">Uploaded Systems</h1>

        <div class="general-grid">
            @foreach (var system in uploadedSystems)
            {
                <div class="general-box">
                    @if (!string.IsNullOrEmpty(system.ImageUrl))
                    {
                        <img src="@system.ImageUrl" alt="System Image" style="max-width: 150px; max-height: 150px; border: 1px solid #000000; border-radius:4px; margin-left: 10px;" />
                    }
                    <p><strong>System Name: </strong> @system.Title</p>
                    <p><strong>Platform Type: </strong> @system.Description</p>
                    <p><strong>Description: </strong> @system.Instructions</p>
                    <p><strong>File: </strong> @system.ZipFileName</p>
                    <div class="dual-button">
                        <button class="edit-button" @onclick="@(() => OpenPopupForEdit(system))">Edit</button>
                        <button class="remove-button" @onclick="@(() => DeleteUploadedSystem(system))">Delete</button>
                    </div>
                </div>
                    
            }
        </div>
    </div>
    <input class="dashboard-button" type="button" value="Back to Dashboard" @onclick="home" />

</div>

@if (showPopup)
{
    <div class="popup-overlay">
        <div class="popup-modal">
            <h2>@(isEditMode ? "Edit" : "Upload")</h2>

            <div class="upper-buttons">
                <label class="upload-zip-button">
                    Upload Zip File <span class="required">*</span>
                    <InputFile OnChange="HandleFileSelectedAsync" accept=".zip" style="display:none" />
                </label>
                @if (showValidation && string.IsNullOrWhiteSpace(tempZipFileName))
                {
                    <p class="validation-error-zip">ZIP file is required.</p>
                }

                @if (!string.IsNullOrEmpty(tempZipFileName))
                {
                    <div>
                        <p class="validation-error-zip">@tempZipFileName</p>
                    </div>
                }

                <div style="text-align: right;">
                    <button class="save-button" @onclick="SaveSystemToFirestoreAsync">Save</button>
                    <button class="return-button" @onclick="ClosePopup">Cancel</button>
                </div>
            </div>

            <div class="upload-container">
                <div class="image-container">
                    @if (!string.IsNullOrEmpty(imagePreviewUrl))
                    {
                        <div style="position: relative; display: inline-block; margin-top: 10px;">
                            <img src="@imagePreviewUrl" class="image" style="max-width: 200px; max-height: 200px; border: 1px solid #ccc;" />
                            <button @onclick="RemoveImage" class="delete-button">×</button>
                        </div>
                    }
                </div>

                <label class="add-image-button">
                    Add Image <span class="required">*</span>
                    <InputFile OnChange="ImageSelectedAsync" accept=".jpg,.jpeg,.png" style="display:none" />
                </label><br />
                @if (showValidation && string.IsNullOrWhiteSpace(imagePreviewUrl))
                {
                    <p class="validation-error">Image is required.</p>
                }

                <label class="field-label">System Name <span class="required">*</span></label><br />
                <textarea class="title-text-field" @bind="title" rows="2" cols="50" placeholder="Type your system name here..."></textarea><br />
                @if (showValidation && string.IsNullOrWhiteSpace(title))
                {
                    <p class="validation-error">Title is required.</p>
                }

                <label class="field-label">Platform Type <span class="required">*</span></label><br />
                <textarea class="description-text-field" @bind="description" rows="3" cols="40" placeholder="Type is Platform Type (Mobile, Desktop or Multi-platform)"></textarea><br />
                @if (showValidation && string.IsNullOrWhiteSpace(description))
                {
                    <p class="validation-error">Platform Type is required.</p>
                }

                <label class="field-label">Description</label><br />
                <textarea class="instruction-text-field" @bind="instruction" rows="3" cols="40" placeholder="Type its description here"></textarea>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" style="color: red;">
                        @errorMessage
                    </div>
                }
            </div>

            <p>Kindly upload your system in ZIP format.</p>
        </div>
    </div>
}


@code {
    private List<UploadedSystem> uploadedSystems = new();
    private string? errorMessage;
    private string? imagePreviewUrl;
    private string? title;
    private string? description;
    private string? instruction;
    private string? tempZipFileName;
    private byte[]? tempZipBytes;

    private bool showPopup = false;
    private bool showValidation = false;
    private bool isEditMode = false;
    private UploadedSystem? editingSystem = null;

        public FirestoreDb _firestore;

        public System()
        {
            // Path to your service account JSON key
        string pathToJson = @"";

            // Load the credential from the JSON key file
            GoogleCredential credential = GoogleCredential.FromFile(pathToJson);

            // Create Firestore client with the credential
            _firestore = new FirestoreDbBuilder
                {
                    ProjectId = "qcu-repo-dbf94",
                    Credential = credential
                }.Build();
        }

    protected override async Task OnInitializedAsync()
    {
        await LoadUploadedSystemsAsync();
    }



    private void OpenPopupForNew()
    {
        isEditMode = false;
        showValidation = false;
        editingSystem = null;
        showPopup = true;
        ClearPopupFields();
    }

    private void OpenPopupForEdit(UploadedSystem system)
    {
        isEditMode = true;
        editingSystem = system;
        title = system.Title;
        description = system.Description;
        instruction = system.Instructions;
        tempZipFileName = system.ZipFileName;
        imagePreviewUrl = system.ImageUrl;
        showPopup = true;
        showValidation = false;
    }

    private void ClosePopup()
    {
        ClearPopupFields();
        showPopup = false;
        editingSystem = null;
        isEditMode = false;
    }

    private void ClearPopupFields()
    {
        title = description = instruction = tempZipFileName = imagePreviewUrl = null;
        tempZipBytes = null;
        showValidation = false;
    }

    private async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        try
        {
            var file = e.File;
            if (file == null)
            {
                errorMessage = "No file selected.";
                return;
            }

            if (!file.Name.EndsWith(".zip", StringComparison.OrdinalIgnoreCase))
            {
                errorMessage = "Selected file is not a .zip file.";
                return;
            }

            const long maxFileSize = 20 * 1024 * 1024;
            if (file.Size > maxFileSize)
            {
                errorMessage = "Selected file exceeds maximum allowed size of 20MB.";
                return;
            }

            tempZipFileName = file.Name;

            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();

            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30)); // 30s timeout
            await stream.CopyToAsync(ms, 81920, cts.Token);

            tempZipBytes = ms.ToArray();
        }
        catch (OperationCanceledException)
        {
            errorMessage = "File upload timed out. Please try a smaller file or check your connection.";
            Console.WriteLine(errorMessage);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error in HandleFileSelectedAsync: {ex}";
            Console.WriteLine(errorMessage);
        }
    }
    private async Task ImageSelectedAsync(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        try
        {
            var file = e.File;
            if (file == null)
            {
                errorMessage = "No image file selected.";
                return;
            }

            const long maxImageSize = 10 * 1024 * 1024; // 10MB
            if (file.Size > maxImageSize)
            {
                errorMessage = "Selected image file exceeds maximum allowed size of 10MB.";
                return;
            }

            using var stream = file.OpenReadStream(maxImageSize);
            using var ms = new MemoryStream();

            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30)); // 30 seconds timeout
            await stream.CopyToAsync(ms, 81920, cts.Token);

            var base64 = Convert.ToBase64String(ms.ToArray());
            imagePreviewUrl = $"data:{file.ContentType};base64,{base64}";
        }
        catch (OperationCanceledException)
        {
            errorMessage = "Image upload timed out. Please try a smaller image or check your connection.";
            Console.WriteLine(errorMessage);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error in ImageSelectedAsync: {ex}";
            Console.WriteLine(errorMessage);
        }
    }


    private void RemoveImage()
    {
        imagePreviewUrl = null;
    }




    private async Task SaveSystemToFirestoreAsync()
    {
        showValidation = true;

        bool isValid =
            !string.IsNullOrWhiteSpace(title) &&
            !string.IsNullOrWhiteSpace(description) &&
            !string.IsNullOrWhiteSpace(tempZipFileName) &&
            !string.IsNullOrWhiteSpace(imagePreviewUrl);

        if (!isValid)
        {
            Console.WriteLine("Validation failed");
            return;
        }

        string? currentUserEmail = firebaseAuthService.GetCurrentEmail();

        if (string.IsNullOrEmpty(currentUserEmail))
        {
            Console.WriteLine("User is not logged in.");
            return;
        }

        try
        {
            var userDoc = _firestore.Collection("students").Document(currentUserEmail);
            var systemsSubcollection = userDoc.Collection("systems");

            var newSystem = new Dictionary<string, object>
        {
            { "title", title ?? "" },
            { "description", description ?? "" },
            { "instructions", instruction ?? "" },
            { "imageUrl", imagePreviewUrl ?? "" },
            { "zipFileName", tempZipFileName ?? "" },
            { "createdAt", Timestamp.GetCurrentTimestamp() }
        };

            await systemsSubcollection.AddAsync(newSystem);
            await LoadUploadedSystemsAsync();
            Console.WriteLine("Document added successfully.");
            ClosePopup();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to Firestore: {ex.Message}");
        }
    }

    private async Task LoadUploadedSystemsAsync()
    {
        uploadedSystems.Clear();

        string? currentUserEmail = firebaseAuthService.GetCurrentEmail();
        if (string.IsNullOrEmpty(currentUserEmail))
        {
            Console.WriteLine("User is not logged in.");
            return;
        }

        try
        {
            var userDoc = _firestore.Collection("students").Document(currentUserEmail);
            var systemsSubcollection = userDoc.Collection("systems");

            var snapshot = await systemsSubcollection.GetSnapshotAsync();

            foreach (var doc in snapshot.Documents)
            {
                if (doc.Exists)
                {
                    var data = doc.ToDictionary();

                    uploadedSystems.Add(new UploadedSystem
                        {
                            Title = data.ContainsKey("title") ? data["title"]?.ToString() ?? "" : "",
                            Description = data.ContainsKey("description") ? data["description"]?.ToString() : null,
                            Instructions = data.ContainsKey("instructions") ? data["instructions"]?.ToString() : null,
                            ZipFileName = data.ContainsKey("zipFileName") ? data["zipFileName"]?.ToString() ?? "" : "",
                            ImageUrl = data.ContainsKey("imageUrl") ? data["imageUrl"]?.ToString() : null
                        });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading systems: {ex.Message}");
        }

        StateHasChanged(); // Refresh UI
    }

    private void DeleteUploadedSystem(UploadedSystem system)
    {
        uploadedSystems.Remove(system);
    }

    private string sidebarClass = "closed";
    private string sidebarButtonClass = "";

    private void ToggleSidebar()
    {
        sidebarClass = sidebarClass == "closed" ? "open" : "closed";
        sidebarButtonClass = sidebarClass == "open" ? "open" : "";
    }

    private void qcuUnitLogin() => Navigation.NavigateTo("/login");
    private void home() => Navigation.NavigateTo("/home");
    private void MySystems() => Navigation.NavigateTo("/mysystem");
    private void adminRegister() => Navigation.NavigateTo("/register");


    public class UploadedSystem
    {
        public string Title { get; set; } = "";
        public string? Description { get; set; }
        public string? Instructions { get; set; }
        public string ZipFileName { get; set; } = "";
        public string? ImageUrl { get; set; }
    }
}
