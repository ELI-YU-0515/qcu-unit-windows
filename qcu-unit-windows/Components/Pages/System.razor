@page "/mysystem"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using qcu_unit_windows.Components.Layout
@layout DashboardLayout
@inject NavigationManager Navigation

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<button class="toggle-sidebar-button @sidebarButtonClass" @onclick="ToggleSidebar">
    &#8594;
</button>

<div class="sidebar-overlay @(sidebarClass == "open" ? "visible" : "")" @onclick="ToggleSidebar"></div>
<div class="home-sidebar @sidebarClass">
    <h1 class="txt1-headline">QCU Repo</h1>
    <button class="my-systems-button" @onclick="MySystems">My Systems</button>
    <input class="logout-button" type="button" value="Logout" @onclick="qcuUnitLogin" />
</div>


<div class="home-layout2">
    <section class="search-section">
        <div class="search-bar">
            <input type="text" placeholder="Search..." />
            <button>Search</button>
        </div>
    </section>




    <div class="title-box">
        <h1 class="txt1 featured-title2">My Systems</h1>
        <div class="button-group2">
            <input class="back-button" type="button" value="Back" @onclick="home" />
            <input class="upload-button" type="button" value="Upload" @onclick="OpenPopup" />
        </div>
    </div>




    <div class="mysystem-recent">
        <h1 class="txt1 featured-title3">Recently Opened</h1>
    </div>



    <div class="mysystem-installed">
        <h1 class="txt1 featured-title3">Uploaded Systems</h1>

        <div class="general-grid">
            @for (int i = 1; i <= 20; i++) // 4x5 = 20 items
            {
                <div class="general-box" @onclick="() => OnGeneralItemClick(i)">
                    <p>Item @i</p>
                </div>
            }
        </div>

    </div>


    <div class="no-scrollbar featured-grid">
        @foreach (var zipFile in importedZips)
        {
            <div class="home-content-container">
                <p>@zipFile</p>
            </div>
        }
    </div>
</div>


@if (showPopup)
{
    <div class="popup-overlay">
        <div class="popup-modal">
            <h2>Upload</h2>
            <label class="upload-zip-button">
                Upload Zip File
                <InputFile OnChange="HandleFileSelectedAsync" accept=".zip" style="display:none" />
            </label>
            <button class="save-button" @onclick="ClosePopup">Save</button>
            <button class="return-button" @onclick="ClosePopup">Cancel</button>
            <div class="upload-container">
                <div class="image-container" id="image-container">
                </div>
                <div class="image-container">
                    @if (!string.IsNullOrEmpty(imagePreviewUrl))
                    {
                        <div style="position: relative; display: inline-block; margin-top: 10px;">
                            <img src="@imagePreviewUrl" class="image" style="max-width: 200px; max-height: 200px; border: 1px solid #ccc;" />
                            <button @onclick="RemoveImage" class="delete-button">×</button>
                        </div>
                    }
                </div>
                <textarea class="title-text-field" id="textInput" rows="2" cols="50" placeholder="Add Title"></textarea>
                <label class="add-image-button">
                    Add Image
                    <InputFile OnChange="ImageSelectedAsync" accept=".jpg,.jpeg,.png" style="display:none" />
                </label>
                <textarea class="description-text-field" id="textInput" rows="3" cols="40" placeholder="Add Description"></textarea>
                <textarea class="instruction-text-field" id="textInput" rows="3" cols="40" placeholder="Add Instructions(Optional)"></textarea>
            </div>
            <p>Kindly upload your system in ZIP format.</p>
        </div>
    </div>
}


@code {
    private List<string> importedZips = new();

    private async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Name.EndsWith(".zip"))
        {
            importedZips.Add(file.Name);
            await InvokeAsync(StateHasChanged); // refresh UI after adding
        }
    }

    private string? imagePreviewUrl;

    private async Task ImageSelectedAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();

            imagePreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(bytes)}";
        }
    }
    private void RemoveImage()
    {
        imagePreviewUrl = null;
    }
    private void qcuUnitLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void home()
    {
        Navigation.NavigateTo("/home");
    }
    private void upload()
    {
        Navigation.NavigateTo("/home");
    }




    private void OnGeneralItemClick(int itemNumber)
    {
        Console.WriteLine($"Clicked on: Item {itemNumber}");
        // Future logic goes here
    }



    private bool showPopup = false;

    private void OpenPopup()
    {
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private string sidebarClass = "closed";
    private string sidebarButtonClass = "";
    private void ToggleSidebar()
    {
        sidebarClass = sidebarClass == "closed" ? "open" : "closed";
        sidebarButtonClass = sidebarClass == "open" ? "open" : "";
    }
    private void MySystems() => Navigation.NavigateTo("/mysystem");

}
