@page "/"
@page "/login"
@using qcu_unit_windows.Components.Layout
@layout LoginLayout
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject FirebaseAuthService firebaseAuthService
@inject EmailServices emailService
@inject FirestoreService fireStoreService
@using Firebase.Auth
@using Google.Cloud.Firestore

<div class="loginn-layout">
    <div class="horizontal-box">
        <!-- Welcome Section -->
        <div class="welcome-box">
            <h1>Welcome to QCU Repository</h1>
            <br /><br /><br />
            <p>This platform allows you to press, store, and manage QCU resources easily.</p><br /><br />
            <p>Please log in to continue.</p>
        </div>

        <!-- Login Section -->
        <div class="login-box">

            <!-- Step 1: Login -->
            <div class="prompt-1" style="@(!showPrompt1 ? "display:none;" : "")">
                <h1 style="text-align:center; margin-bottom:30px;">LOGIN</h1>
                <p style="margin-bottom:60px;">Welcome to QCU-REPO</p>

                <input id="login-email" placeholder="Email" type="email" @bind="email" />
                <input id="login-password" placeholder="Password" type="password" @bind="password"
                       @onfocus="ShowPasswordInstructions" @onblur="HidePasswordInstructions" />
                <input id="login-button" type="button" value="LOGIN" @onclick="HandleLogin" />

                <div id="password-instructions" class="password-instructions" style="display:none;">
                    <p>Password format should be like this:</p>
                    <p><strong>QCU-STUDENTID-surname</strong></p>
                    <p><strong>Example: QCU-201234-guzman</strong></p>
                </div>

                <input type="button" value="Dev: Skip to First Time Logging In?" style="margin-top:10px; color:red;" @onclick="SkipToPrompt2" />
            </div>

            <!-- Step 2: Verification -->
            <div class="prompt-2" style="@(!showPrompt2 ? "display:none;" : "")">
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" @onclick="ReturnToPrompt1" class="svg-button">
                    <path d="M19 12H5"></path>
                    <path d="M12 5l-7 7 7 7"></path>
                </svg>
                <br /><br /><br />

                <h2>First Time Logging In?</h2>
                <p>We’ve sent a 6-digit code to your email.</p>

                <input id="temp-code" placeholder="Enter 6-Digit Code"
                       maxlength="6" inputmode="numeric" pattern="\d*"
                       autocomplete="new-password" spellcheck="false"
                       @bind="verificationCode" @bind:event="oninput"
                       @onkeypress="ValidateKeypress" />

                <input type="button" value="Submit" @onclick="HandleVerificationSubmit" />
                <input type="button" value="Dev: Skip to Create Password" style="margin-top:10px; color:red;" @onclick="SkipToPrompt3" />
            </div>

            <!-- Step 3: Create Password -->
            <div class="prompt-3" style="@(!showPrompt3 ? "display:none;" : "")">
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" @onclick="ReturnToPrompt2" class="svg-button">
                    <path d="M19 12H5"></path>
                    <path d="M12 5l-7 7 7 7"></path>
                </svg>
                <br /><br /><br />

                <h2>Change Password</h2>
                <p>Create a new password for QCUREPO:</p>
                <input id="new-pass-1" placeholder="Create Password" type="password" @bind="newPassword" />
                <input id="new-pass-2" placeholder="Re-Enter Password" type="password" @bind="confirmPassword" />
                <p>Password must include CAPITAL LETTERS, Symbols, and Numbers.</p>

                <input type="button" value="Create Password" @onclick="HandleCreatePassword" style="margin: 30px 0;" />
                <input type="button" value="Dev: Skip to Main Dashboard" style="margin-top:10px; color:red;" @onclick="SkipToDashboard" />
            </div>

        </div>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string verificationCode = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string currentUserId = string.Empty;
    private string generatedCode = string.Empty;

    private bool showPrompt1 = true;
    private bool showPrompt2 = false;
    private bool showPrompt3 = false;

    private async Task ShowPasswordInstructions() =>
        await JSRuntime.InvokeVoidAsync("showPasswordInstructions");

    private async Task HidePasswordInstructions() =>
        await JSRuntime.InvokeVoidAsync("hidePasswordInstructions");

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please fill in both fields.");
            return;
        }

        try
        {
            var userCredential = await firebaseAuthService.SignInWithEmailPassword(email, password);
            if (userCredential != null)
            {
                currentUserId = userCredential.LocalId; // Use LocalId here, since FirebaseLoginResponse doesn't have a User property.

                showPrompt1 = false;
                showPrompt2 = true;

                await SendVerificationEmail();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Login failed.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Login failed: {ex.Message}");
        }
    }


    private async Task SendVerificationEmail()
    {
        generatedCode = new Random().Next(100000, 999999).ToString();
        var sent = await emailService.SendVerificationCodeAsync(email, "User", generatedCode);

        if (sent)
            await JSRuntime.InvokeVoidAsync("alert", "Verification code sent to your email.");
        else
            await JSRuntime.InvokeVoidAsync("alert", "Failed to send code.");
    }

    private async Task HandleVerificationSubmit()
    {
        if (!IsSixDigitCode(verificationCode))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Code must be exactly 6 digits.");
            return;
        }

        if (verificationCode != generatedCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Invalid code.");
            return;
        }

        showPrompt2 = false;
        showPrompt3 = true;
    }

    private async Task HandleCreatePassword()
    {
        if (newPassword != confirmPassword)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Passwords do not match.");
            return;
        }

        if (!IsValidPassword(newPassword))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Include uppercase, numbers, and symbols.");
            return;
        }

        if (string.IsNullOrEmpty(currentUserId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "User not found.");
            return;
        }

        try
        {
            // Assuming you're using Firebase Firestore SDK, make sure to initialize Firestore correctly
            var firestoreDb = FirestoreDb.Create("your_project_id");
            var userDocRef = firestoreDb.Collection("users").Document(currentUserId);
            var updateData = new Dictionary<string, object>
        {
            { "permanent_password", newPassword },
            { "has_permanent_password", true }
        };

            await userDocRef.UpdateAsync(updateData);
            await JSRuntime.InvokeVoidAsync("alert", "Password updated!");

            Navigation.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Firestore Error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error saving password.");
        }
    }


    private void ValidateKeypress(KeyboardEventArgs e)
    {
        if (e.Key.Length == 1 && !char.IsDigit(e.Key[0]))
        {
            JSRuntime.InvokeVoidAsync("alert", "Only digits allowed.");
        }
    }

    private bool IsSixDigitCode(string code) =>
        code.Length == 6 && code.All(char.IsDigit);

    private bool IsValidPassword(string pass) =>
        pass.Any(char.IsUpper) && pass.Any(char.IsDigit) && pass.Any(c => !char.IsLetterOrDigit(c));

    private void ReturnToPrompt1()
    {
        showPrompt1 = true;
        showPrompt2 = false;
    }

    private void ReturnToPrompt2()
    {
        showPrompt2 = true;
        showPrompt3 = false;
    }

    private void SkipToPrompt2()
    {
        showPrompt1 = false;
        showPrompt2 = true;
    }

    private void SkipToPrompt3()
    {
        showPrompt2 = false;
        showPrompt3 = true;
    }

    private void SkipToDashboard() =>
        Navigation.NavigateTo("/home");
}

<script>
    window.showPasswordInstructions = () => {
        document.getElementById("password-instructions").style.display = "block";
    };

    window.hidePasswordInstructions = () => {
        document.getElementById("password-instructions").style.display = "none";
    };
</script>
